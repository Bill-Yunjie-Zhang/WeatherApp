{"version":3,"sources":["app/components/CardsForWeather.js","app/components/BuildCardsForWeather.js","app/screens/WeatherScreen.js","app/components/CardsForForcast.js","app/components/BuildTheTop.js","app/components/BuildCardsForForcast.js","app/screens/ForcastScreen.js","app/screens/HomeScreen.js","app/index.js","serviceWorker.js","index.js"],"names":["Cards","_this","this","item","props","seconds","minutes","onDelete","onRefresh","react_default","a","createElement","Card","style","margin","key","id","Content","textAlign","cityName","Meta","Header","marginTop","temp","description","Description","country","lon","lat","Button","Group","attached","size","color","onClick","Or","React","Component","BuildCard","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","Math","floor","setState","_this2","interval","setInterval","tick","clearInterval","time","CardsForWeather","WeatherScreen","items","city","response","handleChange","bind","assertThisInitialized","handleSubmit","handleDelete","handleRefresh","unit","thisComponent","axios","get","then","res","data","name","main","weather","sys","coordData","coord","newItem","Date","now","concat","catch","err","console","log","Segment","inverted","Container","onSubmit","Menu","secondary","Item","position","Input","action","placeholder","onChange","value","map","BuildCardsForWeather","ev","target","itemId","filter","find","getWeatherData","preventDefault","length","dt_txt","humidity","pressure","temp_max","temp_min","wind","windSpeed","speed","windDeg","deg","es_Card","width","Body","Title","Text","BuildTheTop","marginBottom","border","className","bg","text","as","population","Footer","BuildCards","info","components_BuildTheTop","list","CardsForForcast","ForcastScreen","BuildCardsForForcast","HomeScreen","es_Container","Jumbotron","backgroundColor","borderRadius","fontSize","App","react_router_dom","react_router","path","exact","component","height","Navbar_default","variant","expand","fixed","to","Link","Boolean","window","location","hostname","match","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e0aa18c.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button, Card } from 'semantic-ui-react'\r\n\r\n\r\nclass Cards extends React.Component{\r\n    render(){\r\n        var item = this.props.item\r\n        var seconds = this.props.seconds\r\n        var minutes = this.props.minutes\r\n        var onDelete = this.props.onDelete\r\n        var onRefresh = this.props.onRefresh\r\n        return (\r\n            <Card style={{margin: 30}} key={item.id}>\r\n                <Card.Content>\r\n                    <h1 style={{textAlign: \"center\"}}>{item.cityName}</h1>\r\n                    <hr/>\r\n                    <Card.Meta>last refresh: {minutes} minutes {seconds} seconds ago</Card.Meta>\r\n                    <Card.Header style={{marginTop: 15}}>Temperature: {item.temp}℃</Card.Header>\r\n                    <Card.Header>Weather: {item.description}</Card.Header>\r\n                    <Card.Description>a city in: {item.country}</Card.Description>\r\n                    <Card.Description>longitude: {item.lon} </Card.Description>\r\n                    <Card.Description>latitude: {item.lat}</Card.Description>\r\n                </Card.Content>\r\n                <Button.Group attached=\"bottom\" size='large'>\r\n                    <Button color=\"green\" onClick={() => onRefresh(this.props.id)}> Refresh</Button>\r\n                    <Button.Or />\r\n                    <Button onClick={() => onDelete(this.props.id)}>Delete</Button>\r\n                </Button.Group>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Cards","import React from 'react'\r\nimport Cards from './CardsForWeather'\r\n\r\n\r\nclass BuildCard extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = { seconds: 0}\r\n    }\r\n\r\n    tick(){\r\n        const seconds = this.state.seconds%60\r\n        const minutes = (Math.floor(seconds/60))%60\r\n        const hours = (Math.floor(minutes/60))%60\r\n        if(hours >= 1){\r\n            this.props.onRefresh(this.props.id)\r\n        }else{\r\n            this.setState(state => ({\r\n                seconds: state.seconds + 1\r\n            }))\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.interval = setInterval(() => this.tick(), 1000)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.interval)\r\n    }\r\n\r\n    render(){\r\n        var time = this.state.seconds\r\n        var seconds = time%60\r\n        var minutes = (Math.floor(time/60))%60\r\n        return (\r\n            <Cards item={this.props.item} key={this.props.id} id={this.props.id} seconds={seconds} minutes={minutes} onDelete={this.props.onDelete} onRefresh={this.props.onRefresh}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default BuildCard","import React from 'react'\r\nimport axios from 'axios'\r\nimport { Menu, Segment, Container, Input, Card } from 'semantic-ui-react'\r\nimport BuildCard from '../components/BuildCardsForWeather'\r\n\r\n\r\nclass WeatherScreen extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        items: [], \r\n        city: '',\r\n        response: {}\r\n      };\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n      this.handleDelete = this.handleDelete.bind(this);\r\n      this.handleRefresh = this.handleRefresh.bind(this);\r\n    }\r\n\r\n    getWeatherData(city, unit){\r\n        const thisComponent = this\r\n        axios.get('https://api.openweathermap.org/data/2.5/weather?q='+ city + '&APPID=eda439d629165a345559e6e9043cf085&units=' + unit)\r\n        .then(function(res){\r\n            const data = res.data\r\n            var cityName = data.name\r\n\r\n            var main = data.main || {}\r\n            var temp = main.temp\r\n\r\n            var weatherData = data.weather || []\r\n            var weatherDataObject = weatherData[0] || {}\r\n            var description = weatherDataObject.description\r\n\r\n            var sysData = data.sys || {}\r\n            var country = sysData.country\r\n\r\n            var coordData = data.coord || {}\r\n            var lon = coordData.lon\r\n            var lat = coordData.lat\r\n            const newItem = {\r\n                cityName: cityName, \r\n                temp: temp,\r\n                description: description,\r\n                country: country,\r\n                lon: lon,\r\n                lat: lat,\r\n                id: Date.now(),\r\n            };\r\n            thisComponent.setState(state => ({\r\n                items: [newItem].concat(state.items),\r\n                city: '',\r\n                response: {}\r\n            }));\r\n        })\r\n        .catch(function(err){\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Segment inverted>\r\n                    <Container>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <Menu inverted secondary>\r\n                            <Menu.Item position=\"left\">\r\n                                <h1>Weather</h1>\r\n                            </Menu.Item>\r\n                            <Menu.Item>\r\n                                <h1>Get current weather!!!</h1>\r\n                            </Menu.Item>\r\n                            <Menu.Item position='right'>\r\n                                <Input action='Add' id=\"new-city\" placeholder='City...' onChange={this.handleChange} value={this.state.city}/>\r\n                            </Menu.Item>\r\n                        </Menu>\r\n                    </form>\r\n                    </Container>\r\n                </Segment>\r\n                <Container>\r\n                    <Card.Group>\r\n                        {this.state.items.map(item => (\r\n                            <BuildCard item={item} key={item.id} id={item.id} onDelete={this.handleDelete} onRefresh={this.handleRefresh}/>\r\n                        ))}  \r\n                    </Card.Group>\r\n                </Container>\r\n            </div>\r\n      );\r\n    }\r\n\r\n    handleChange(ev) {\r\n        this.setState({ city: ev.target.value });\r\n    }\r\n    \r\n    handleDelete(itemId){\r\n        const items = this.state.items.filter(function(item){\r\n            return item.id !== itemId\r\n        })\r\n        this.setState({items: items})\r\n    }\r\n\r\n    handleRefresh(itemId){\r\n        const refreshItem = this.state.items.find(function(item){\r\n            return item.id === itemId\r\n        })\r\n        const name = refreshItem.cityName\r\n        this.getWeatherData(name, 'metric')\r\n        this.handleDelete(itemId)\r\n    }\r\n\r\n    handleSubmit(ev) {\r\n        ev.preventDefault();\r\n        if (!this.state.city.length) {\r\n            return;\r\n        } else{\r\n            this.getWeatherData(this.state.city, 'metric')\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default WeatherScreen","import React from 'react'\r\nimport {Card} from 'react-bootstrap'\r\n\r\n\r\nclass Cards extends React.Component{\r\n    render(){\r\n        const item = this.props.item\r\n        const dt_txt = item.dt_txt\r\n        const main = item.main\r\n        const humidity = main.humidity\r\n        const pressure = main.pressure\r\n        const temp = main.temp\r\n        const temp_max = main.temp_max\r\n        const temp_min = main.temp_min\r\n        const weather = item.weather[0]\r\n        const description = weather.description\r\n        const wind = item.wind\r\n        const windSpeed = wind.speed\r\n        const windDeg = wind.deg\r\n        return (\r\n            <Card style={{ width: 260}}>\r\n                <Card.Header style={{textAlign: \"center\", color: \"red\"}}>{dt_txt}</Card.Header>\r\n                <Card.Body>\r\n                    <Card.Title>Temperature: {temp}℃</Card.Title>\r\n                    <Card.Text>maximum Temperature: {temp_max}℃</Card.Text>\r\n                    <Card.Text>minimum Temperature: {temp_min}℃</Card.Text>\r\n\r\n                    <hr/>\r\n                    <Card.Title>Weather: {description}</Card.Title>\r\n                    <Card.Text>humidity: {humidity}</Card.Text>\r\n                    <Card.Text>pressure: {pressure}</Card.Text>\r\n                    <hr/>\r\n\r\n                    <Card.Title>Wind</Card.Title>\r\n                    <Card.Text>wind speed: {windSpeed}</Card.Text>\r\n                    <Card.Text>wind degree: {windDeg}</Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Cards","import React from 'react'\r\nimport {Card} from 'react-bootstrap'\r\nimport {Button} from 'semantic-ui-react'\r\n\r\n\r\nclass BuildTheTop extends React.Component{\r\n    render(){\r\n        return <Card style={{marginTop: 30, marginBottom: 30, border: \"2px solid white\"}} className=\"text-center\" bg=\"dark\" text=\"white\" >\r\n            <Card.Header as=\"h1\">{this.props.name}</Card.Header>\r\n            <Card.Body>\r\n                <Card.Title>{this.props.country}</Card.Title>\r\n                <Card.Text>{this.props.name} is a city with a population of {this.props.population}!</Card.Text>\r\n                <Button.Group>\r\n                    <Button color=\"green\" onClick={() => this.props.onRefresh(this.props.id)}> Refresh</Button>\r\n                        <Button.Or />\r\n                    <Button onClick={() => this.props.onDelete(this.props.id)}>Delete</Button>\r\n                </Button.Group>\r\n                </Card.Body>\r\n            <Card.Footer className=\"text-muted\">lat: {this.props.lat} lon: {this.props.lon}</Card.Footer>\r\n        </Card>\r\n    }\r\n}\r\n\r\n\r\nexport default BuildTheTop","import React from 'react'\r\nimport {Card} from 'semantic-ui-react'\r\nimport Cards from '../components/CardsForForcast'\r\nimport BuildTheTop from '../components/BuildTheTop'\r\n\r\n\r\nclass BuildCards extends React.Component{\r\n    render(){\r\n        const item = this.props.item\r\n        const city = item.city\r\n        const info = city.city\r\n        const name = info.name\r\n        const country = info.country\r\n        const population = info.population\r\n        const coord = info.coord\r\n        const lat = coord.lat\r\n        const lon = coord.lon\r\n        return <div>\r\n            <BuildTheTop onDelete={this.props.onDelete} onRefresh={this.props.onRefresh} country={country} name={name} population={population} lat={lat} lon={lon} key={this.props.id} id={this.props.id}/>\r\n            <Card.Group>\r\n                {city.list.map(item => (\r\n                    <Cards item={item}/>\r\n                ))}\r\n            </Card.Group>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nexport default BuildCards","import React from \"react\"\r\nimport axios from 'axios'\r\nimport { Menu, Segment, Input, Container } from 'semantic-ui-react'\r\n\r\nimport BuildCards from '../components/BuildCardsForForcast'\r\n\r\n\r\nclass ForcastScreen extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            items: [],\r\n            city: '',\r\n            response: {}\r\n        };\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.handleDelete = this.handleDelete.bind(this)\r\n        this.handleRefresh = this.handleRefresh.bind(this)\r\n    }\r\n\r\n    getWeatherData(city, unit){\r\n        const thisComponent = this\r\n        axios.get('https://api.openweathermap.org/data/2.5/forecast?q='+ city + '&APPID=eda439d629165a345559e6e9043cf085&units=' + unit)\r\n        .then(function(res){\r\n            const data = res.data\r\n            const city = data.city || {}\r\n            const name = city.name\r\n            const newItem = {\r\n                cityName: name,\r\n                city: data,\r\n                id: Date.now()\r\n            }\r\n            thisComponent.setState(state => ({\r\n                items: [newItem].concat(state.items), \r\n                city: '',\r\n                response: {}\r\n            }));\r\n        })\r\n        .catch(function(err){\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Segment inverted>\r\n                    <Container>\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <Menu inverted secondary>\r\n                                <Menu.Item position=\"left\">\r\n                                    <h1>Weather</h1>\r\n                                </Menu.Item>\r\n                                <Menu.Item>\r\n                                    <h1>Get forcasts!!!</h1>\r\n                                </Menu.Item>\r\n                                <Menu.Item position='right'>\r\n                                    <Input action='Check' id=\"new-city\" placeholder='City...' onChange={this.handleChange} value={this.state.city}/>\r\n                                </Menu.Item>\r\n                            </Menu>\r\n                        </form>\r\n                    </Container>\r\n                </Segment>\r\n                <Container>\r\n                        {this.state.items.map(item => (\r\n                            <BuildCards item={item} key={item.id} id={item.id} onDelete={this.handleDelete} onRefresh={this.handleRefresh}/>\r\n                        ))}\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleChange(ev){\r\n        this.setState({city: ev.target.value})\r\n    }\r\n\r\n    handleDelete(itemId){\r\n        const items = this.state.items.filter(function(item){\r\n            return item.id !== itemId\r\n        })\r\n        this.setState({items: items})\r\n    }\r\n\r\n    handleRefresh(itemId){\r\n        const refreshItem = this.state.items.find(function(item){\r\n            return item.id === itemId\r\n        })\r\n        const name = refreshItem.cityName\r\n        this.getWeatherData(name, 'metric')\r\n        this.handleDelete(itemId)\r\n    }\r\n\r\n    handleSubmit(ev){\r\n        ev.preventDefault();\r\n        if(!this.state.city.length){\r\n            return\r\n        } else{\r\n            this.getWeatherData(this.state.city, 'metric')\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default ForcastScreen","import React from 'react'\r\nimport { Container,Jumbotron} from 'react-bootstrap'\r\n\r\n\r\nclass HomeScreen extends React.Component{\r\n    render(){\r\n        const style = { \r\n            marginTop: 50,\r\n            backgroundColor: \"#1a1a1a\", \r\n            color: \"#ffffff\",\r\n            borderRadius: 30,\r\n            textAlign: \"center\"\r\n        }\r\n        return <Container>\r\n            <Jumbotron style={style}>\r\n                <h1 style={{fontSize:45}}>Hello, world!</h1>\r\n                <hr style={{backgroundColor: \"#ffffff\", margin: 10}}/>\r\n                <h2>\r\n                    <strong>Weather</strong>: <br/>\r\n                    This allows you to add the current weather info of any city. \r\n                    The system will automatically refresh every hour. \r\n                    But if you want to check the accurate info of the moment when checking, click the \"refresh\" button. \r\n                    Click the \"delete\" button to delete any unwanted weather info.\r\n                </h2>\r\n                <hr style={{backgroundColor: \"#ffffff\", margin: 10}}/>\r\n                <h2>\r\n                    <strong>Forcast</strong>: <br/>\r\n                    This allows you to add a five day forecast info by the interval three hours.\r\n                    By the beginning of the each forcast, the system will also automatically present you with some basic info on the city you are searching.\r\n                    Click the \"delete\" button to delete any unwanted group of predications.\r\n                </h2>\r\n            </Jumbotron>\r\n        </Container>\r\n    }\r\n}\r\n\r\n\r\nexport default HomeScreen","import React from 'react'\r\nimport { BrowserRouter, Route, Link } from 'react-router-dom'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport { Menu, Container } from 'semantic-ui-react'\r\n\r\nimport WeatherScreen from './screens/WeatherScreen'\r\nimport ForcastScreen from './screens/ForcastScreen'\r\nimport HomeScreen from './screens/HomeScreen'\r\n\r\n\r\nclass App extends React.Component{\r\n    render(){\r\n        return <div>\r\n            <BrowserRouter>\r\n                <Route path = \"/\" exact={true} component={HomeScreen} />\r\n                <Route path = \"/weather\" exact={true} component={WeatherScreen} />\r\n                <Route path = \"/forcast\" exact={true} component={ForcastScreen} />\r\n                <div style={{height: 100}}></div>\r\n                <Navbar style={{backgroundColor: \"#1c1c1c\"}} variant=\"dark\" expand=\"lg\" fixed=\"bottom\">\r\n                <Container>\r\n                    <Menu inverted>\r\n                        <Menu.Item to=\"/\" as={Link}><h4>Home</h4></Menu.Item>\r\n                        <Menu.Item to=\"/weather\" as={Link}><h4>Weather</h4></Menu.Item>\r\n                        <Menu.Item to=\"/forcast\" as={Link}><h4>Forcast</h4></Menu.Item>\r\n                    </Menu>\r\n                    </Container>\r\n                </Navbar> \r\n            </BrowserRouter>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}